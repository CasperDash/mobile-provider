const DuplexStream = require('readable-stream').Duplex
const inherits = require('util').inherits

module.exports = PostMessageStream

inherits(PostMessageStream, DuplexStream)

function PostMessageStream (opts) {
  DuplexStream.call(this, {
    objectMode: true,
  })

  this._name = opts.name
  this._target = opts.target
  this._targetWindow = opts.targetWindow || window
  this._origin = (opts.targetWindow ? '*' : location.origin)

  // initialization flags
  this._init = false
  this._haveSyn = false

  window.addEventListener('message', this._onMessage.bind(this), false)
  // send syncorization message
  this._write('SYN', null, noop)
  this.cork()
}

// private
PostMessageStream.prototype._onMessage = function (event) {
  var msg = event.data
  
  // validate message
  if (this._origin !== '*' && event.origin !== this._origin){
    console.log(this._name + " :: origin doesnt match", event.origin, this._origin, "IS IFRAME?", window !== top); 
    return
  }
  if (event.source !== this._targetWindow && window === top){ 
    console.log(this._name + " :: window doesnt match", event.source, this._targetWindow, "IS IFRAME?", window !== top); 
    return
  }
  if (typeof msg !== 'object'){
    console.log(this._name + " :: msg typeof doesnt match", typeof msg , "object", "IS IFRAME?", window !== top); 
    return
  }
  if (msg.target && msg.target !== this._name){
    console.log(this._name + " :: target doesnt match", msg.target, this._name, "IS IFRAME?", window !== top); 
    return
  }
  if (!msg.data){
    console.log(this._name + " :: data doesnt match", msg.data, "IS IFRAME?", window !== top); 
    return
  }

  // Fix for iFrames
  if(window !== top && !msg.name) {
    console.log(this._name + ' :: Iframe got message and it was fixed', msg.data, "IS IFRAME?", window !== top);
    msg = msg.data;
  }


  if (!this._init) {
    if (msg.data === 'SYN') {
      this._haveSyn = true
      this._write('ACK', null, noop)
    } else if (msg.data === 'ACK') {
      this._init = true
      if (!this._haveSyn) {
        this._write('ACK', null, noop)
      }
      this.uncork()
    }
  } else {
    // forward message
    console.log(this._name + ' :: onMessage:push', msg, "IS IFRAME?", window !== top);
    try {
      this.push(msg.data.name && msg.data || msg)
    } catch (err) {
      console.error(this._name + ' :: onMessage:push', error);
      this.emit('error', err)
    }
  }
}

// stream plumbing
PostMessageStream.prototype._read = noop

PostMessageStream.prototype._write = function (data, encoding, cb) {
  var message = {
    target: this._target,
    data: data,
  }
  console.log(this._name + ' _write:postingMessage', message, this._origin, this._targetWindow,  "IS IFRAME?", window !== top);
  this._targetWindow.postMessage(message, this._origin)
  cb()
}

// util

function noop () {}
